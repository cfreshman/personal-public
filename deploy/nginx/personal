# /etc/nginx/sites-available/common

# personal - main block
# send to backend on box
server {
    # server_name [::1]:5005;
    server_name freshman.dev frsh.mn cyru.us cyrusman.xyz grtr.app grtr.xyz greeter.social vibe.photos;
    include sites-available/fragments/personal-ssl;
    include sites-available/fragments/gzip;
    listen [::]:443 ssl http2;
    charset utf-8;
    rewrite ^/-?(.*)/?$ /$1;
    rewrite ^/raw/-?(.*)/?$ /raw/$1;
    error_page 418 = @base; # use it's a teapot error code as goto
    location /icon.png {
        try_files /raw/$host$uri $uri icon.png;
    }
    location /resume/man {
        return 301 /resume;
    }
    location /resume {
        return 307 https://freshman.dev/resume-CyrusFreshman.html;
    }
    location ~ ^/resume- {
        add_header Access-Control-Allow-Origin *;
        try_files $uri $uri/ /index.html;
    }
    location /raw/craw/fish {
        add_header Access-Control-Allow-Origin *;
        try_files /raw/craw/fish/index.html =404;
    }
    location ~ ^/craw { return 301 /raw/craw/fish; }
    
    # location ~ ^/raw/stream { try_files @base @base; }
    # location ~ ^/raw/([^/]+)/(.*)$ {
    #     add_header Access-Control-Allow-Origin *;
    #     try_files /raw/$1/$2 /raw/$1/index.html /raw/simple/$1.html @base;
    # }
    # location ~ ^/raw/([^/]+)$ {
    #     add_header Access-Control-Allow-Origin *;
    #     try_files /raw/$1/index.html /raw/simple/$1.html @base;
    # }
    location = /raw/stream/ { try_files @base @base; }
    location /raw {
        client_max_body_size 100M;
        add_header Access-Control-Allow-Origin *;
        try_files $uri $uri/ @base;
    }
    location = /styles.css {
        add_header Access-Control-Allow-Origin *;
        try_files $uri $uri/ @base;
    }
    location ~ ^/(lib|fonts|static|[^/]+\.(js|html|css|pdf|png|jpg|jpeg|gif)) {
        add_header Access-Control-Allow-Origin *;
        try_files $uri $uri/ @base;
    }
    location /api/file {
        client_max_body_size 1000M;
        proxy_set_header Host $host;
        include sites-available/fragments/proxy;
        proxy_pass http://[::1]:5000$uri$is_args$args;
    }
    location /api {
        client_max_body_size 100M;
        include sites-available/fragments/proxy;
        proxy_set_header Host $host;
        proxy_pass http://[::1]:5000$uri$is_args$args;
    }
    location /ly { return 418; }
    # location ~* /\..*$ { return 418; } # use /.name for /ly/name
    location /socket.io { return 418; }
    location /wordbase { return 418; } # get explicit meta info
    location @base {
        include sites-available/fragments/proxy;
        proxy_pass http://[::1]:5000$uri$is_args$args;
        # proxy_pass https://back.freshman.dev$request_uri$is_args$args;
        # proxy_pass https://24.183.185.23:443$request_uri$is_args$args;
    }
    location / {
        # try_files $uri $uri/ /index.html;
        # try_files @base @base; # send all to dynamic for preview meta info
        return 418;
    }
}
# redirect all www
server {
    server_name ~^www\.(?<domain>[^.]+)\.(?<tld>[^.]+)$;
    listen 80;
    include sites-available/fragments/personal-ssl;
    return 301 $scheme://$domain.$tld$request_uri$is_args$args;
}

# public git
server {
    server_name ~^public\.;
    listen 80;
    include sites-available/fragments/listen-ssl;
    root /srv/git;
    error_page 418 = @redirect;
    location @redirect {
        return 301 https://git.freshman.dev;
    }
    location / {
        try_files $uri $uri/ =418;
    }
}
# public git visualizer
server {
    server_name ~^code\.;
    listen 80;
    location / {
        proxy_pass http://127.0.0.1:1234;
    }
}

# gitly - shorten github (and other source control ?) @ git.
server {
    server_name ~^git\.;
    include sites-available/fragments/personal-ssl;
    include sites-available/fragments/gzip;
    location = / {
        try_files $uri $uri/ raw/git/index.html;
    }
    location / {
        try_files /raw/git/$uri /raw/git/$uri/ $uri $uri/ @proxy;
    }
    location @proxy {
        proxy_pass https://[::1]/gitly$request_uri$is_args$args;
        include sites-available/fragments/proxy;
    }
}

# NEW 2024-11-04 xn--uda.fo "tell me what to do with this"
server {
    server_name xn--uda.fo;
    listen 80;
    include sites-available/fragments/personal-ssl;
    include sites-available/fragments/gzip;
    location / {
        try_files /raw/y_fo/index.html =404;
    }
}

# l. index - static page, proxy paths to /ly
server {
    server_name l.freshman.dev l0.vc
        xn--bdk.day # ツ.day
        xn--9ck.day # ッ.day
        xn--bdk.pw # ツ.pw
        xn--uda.fo # ý.fo
        tu.fo nn.fo
        ~^l.;
    include sites-available/fragments/personal-ssl;
    include sites-available/fragments/gzip;

    # location / {
    #     return 494;
    # }

    # location / {
    #     return 301 https://freshman.dev/raw/l_dot$request_uri$is_args$args;
    # }

    # error_page 418 = @common_dynamic;
    # location @common_dynamic {
    #     proxy_pass https://[::1]$request_uri$is_args$args;
    #     include sites-available/fragments/proxy;
    # }
    # location /socket.io { return 418; }
    # location /api { return 418; }

    # rewrite ^/-(.*)/?$ /$1;
    location = / { # send root to /raw/l_dot
        try_files /raw/l_dot/index.html /raw/l_dot/index.html;
    }
    # location ~ ^/(lib|fonts) {
    #     try_files $uri $uri/;
    # }
    location / {
        try_files $uri $uri/ @proxy;
    }
    location @proxy {
        proxy_pass https://[::1]/ly$request_uri$is_args$args;
        include sites-available/fragments/proxy;
    }
}
# raw.l.
server {
    server_name raw.freshman.dev raw.l0.vc
        raw.xn--bdk.day # ツ.day
        raw.xn--9ck.day # ッ.day
        raw.xn--bdk.pw # ツ.pw
        raw.xn--uda.fo # ý.fo
        raw.xn--nda.wtf # ö.wtf
        raw.tu.fo raw.nn.fo;
    include sites-available/fragments/gzip;
    include sites-available/fragments/personal-ssl;

    # rewrite ^/-?(.*)/?$ /$1;
    # error_page 418 = @common_dynamic;
    # location @common_dynamic {
    #     proxy_pass https://[::1]$request_uri$is_args$args;
    #     include sites-available/fragments/proxy;
    # }
    # location ~ ^/(api|raw|ly|socket.io|lib|fonts|static|[^/]+\.(js|html|pdf|png|jpg|jpeg|gif)) { return 418; }
    # location / {
    #     try_files @common_dynamic =404;
    # }

    # location /stream {
    #     # return 301 https://freshman.dev/raw$request_uri$is_args$args;
    #     include sites-available/fragments/proxy;
    #     proxy_pass https://[::1]/raw$uri$is_args$args;
    # }
    # location = / {
    #     try_files /raw/l_dot/index.html @common_dynamic;
    # }
    # location / {
    #     try_files /raw$uri /raw$uri/ /raw$uri/index.html /raw/simple$uri.html $uri $uri/ $uri/index.html =404;
    # }
    location / {
        return 301 https://freshman.dev/raw$request_uri$is_args$args;
    }
}
# l. subdomains - redirect to project pages (for non-raw)
server {
    server_name ~^(?<subdomain>\w+(?:-\w+)*)\.l0\.vc$
        ~^(?<subdomain>\w+(?:-\w+)*)\.(?<domain>.+)\.fo$
        ~^(?<subdomain>\w+(?:-\w+)*)\.xn--bdk\.(?<tld>.+)$
        ~^(?<subdomain>\w+(?:-\w+)*)\.xn--9ck\.(?<tld>.+)$
        ~^(?<subdomain>\w+(?:-\w+)*)\.xn--nda\.(?<tld>.+)$
        ~^(?<subdomain>\w+(?:-\w+)*)\.unhappy\.app$;
    include sites-available/fragments/personal-ssl;
    include sites-available/fragments/gzip;
    location / {
        return 301 $scheme://freshman.dev/$subdomain$request_uri$is_args$args;
    }

    # error_page 418 = @common_dynamic;
    # location @common_dynamic {
    #     proxy_pass https://[::1]/$subdomain$request_uri$is_args$args;
    #     include sites-available/fragments/proxy;
    #     proxy_set_header Host freshman.dev;
    # }
    # location / { return 418; }
}

# NEW BLOCK 2024-10-29 - redirect subdomains
server {
    server_name ~^(?<subdomain>[^.]+)\.(?<domain>[^.]+)\.(?<tld>[^.]+)$;
    include sites-available/fragments/personal-ssl;
    include sites-available/fragments/gzip;
    location / {
        return 301 $scheme://$domain.$tld/$subdomain$request_uri$is_args$args;
    }
}

# now ignored
server {
    server_name ~^(?<subdomain>[^.]+)\.(?<domain>[^.]+)\.(?<tld>[^.]+)$;
    include sites-available/fragments/personal-ssl;
    include sites-available/fragments/gzip;
    
    rewrite ^/\?(.*)$ /$1;
    rewrite ^/-(.*)$ /$1;
    rewrite ^/(.*)/$ /$1;
    
    error_page 418 = @proxy;
    location @proxy {
        include sites-available/fragments/proxy;
        proxy_set_header Host $domain.$tld;
        proxy_pass https://[::1]$request_uri$is_args$args;
    }
    location /static {
        add_header Access-Control-Allow-Origin *;
        try_files $uri $uri/ /index.html;
    }
    location ~ ^/(lib|fonts|[^/]+.js) { try_files $uri $uri/ =418; }
    location ~ ^/(api|raw|ly|socket.io) { return 418; }
    location /cafe {
        try_files $uri $uri/ /raw/simple/cafe.html;
    }

    # location / {
    #     return 301 https://$domain.$tld/$subdomain$request_uri$is_args$args;
    # }

    location @subdomain {
        include sites-available/fragments/proxy;
        proxy_set_header Host $domain.$tld;
        proxy_pass https://[::1]/$subdomain$request_uri$is_args$args;
    }
    location = / {
        # try_files /raw/$subdomain /raw/$subdomain/ /raw/$subdomain/index.html /raw/simple/$subdomain.html @subdomain;
        try_files /raw/$subdomain /raw/$subdomain/ /raw/simple/$subdomain.html @subdomain;
    }
    # location = /man {
    #     # try_files /raw/$subdomain$uri /raw/$subdomain$uri/ /raw/$subdomain/index.html /raw/simple/$subdomain.html @subdomain;
    #     # try_files @proxy;
    # }
    location / {
        try_files /raw/$subdomain$uri /raw/$subdomain$uri/ @subdomain;
        # try_files @subdomain @proxy;
    }
    # location = / {
    #     try_files @subdomain /raw/$subdomain /raw/$subdomain/ /raw/$subdomain/index.html /raw/simple/$subdomain.html;
    # }
    # location = /man {
    #     try_files @subdomain /raw/$subdomain$uri /raw/$subdomain$uri/ /raw/$subdomain/index.html /raw/simple/$subdomain.html;
    # }
    # location / {
    #     try_files @proxy /raw/$subdomain$uri /raw/$subdomain$uri/;
    # }
}

# .cafe
server {
    server_name ~^.+\.cafe;
    listen 80;
    include sites-available/fragments/personal-ssl;
    include sites-available/fragments/gzip;
    location / {
        try_files /raw/simple/cafe.html =404;
    }
}

# .computer .codes *OS. webputer.page computer.
server {
    server_name ~^computer\. ~^.+\.(computer|codes) ~^.+\.(computer|codes) webputer.page sickos.xyz;
    # listen 80;
    include sites-available/fragments/personal-ssl;
    include sites-available/fragments/gzip;
    location = / {
        try_files /raw/simple/computer.html =404;
    }
    location /simple {
        try_files /raw/simple$uri @proxy;
    }
    error_page 418 = @proxy;
    location /socket.io { return 418; }
    location /api {
        try_files /raw/simple$uri =418;
    }
    # location ~ ^/([^/.]+)$ {
    #     return 301 /$1.html;
    # }
    location ~ ^/home/(.+) {
        try_files /raw/simple$uri @file;
    }
    location @file {
        proxy_pass https://[::1]/simple$request_uri$is_args$args;
        include sites-available/fragments/proxy;
    }
    location / {
        try_files /raw/simple$uri $uri @public;
    }
    location @public {
        proxy_pass https://[::1]/simple/home/public$request_uri$is_args$args;
        include sites-available/fragments/proxy;
    }
    location ~ ^/raw/simple/(.+)$ {
        return 301 /$1$is_args$args;
    }
    location @proxy {
        proxy_pass https://[::1]$request_uri$is_args$args;
        include sites-available/fragments/proxy;
    }

    location /static { return 418; }
    location /raw { return 418; }
    location ~ ^/(lib|fonts) { return 418; }
}

# shr.ooo/m
server {
    server_name shr.ooo;
    listen 80;
    include sites-available/fragments/personal-ssl;
    include sites-available/fragments/gzip;
    location ~ ^/(o*)m$ {
        try_files /raw/simple/shroom.html =404;
    }
    location ~ ^/(o*)ms$ {
        try_files /raw/uh-no/index.html =404;
    }
    location / {
        return 301 https://shr.ooo/m;
    }
}

# online check - o
server {
    server_name ~^o\.(?<domain>[^.]+)\.(?<tld>[^.]+)$;
    include sites-available/fragments/personal-ssl;
    return 301 $scheme://$domain.$tld/api/online;
}

# mastodon
server {
    # server_name ~^mastodon\.(?<domain>[^.]+)\.(?<tld>[^.]+)$;
    server_name mastodon.freshman.dev;
    include sites-available/fragments/listen-ssl;
    # let mastodon nginx handle other requests
    # location / {
    #     proxy_pass http://[::1]:3003$request_uri$is_args$args;
    #     proxy_set_header Host mastodon.freshman.dev;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto https;
    # }
    error_page 418 = @resolve;
    location /share {
        if ( $arg_resolve = "true") { return 418; }
    }
    location /authorize_follow {
        if ( $arg_resolve = "true") { return 418; }
    }
    location @resolve {
        proxy_pass http://[::1]:5000/api/mastodon-intent-auth$request_uri$is_args$args;
        include sites-available/fragments/proxy;
        proxy_set_header Host $host;
    }
    location /actual_share {
        set $new_request_uri $request_uri$is_args$args;
        if ($request_uri ~ ^/actual_share(.*)$) {
            set $new_request_uri $1;
        }
        proxy_pass https://[::1]:3003/share$new_request_uri;
    }
    location /actual_authorize_follow {
        set $new_request_uri $request_uri$is_args$args;
        if ($request_uri ~ ^/actual_authorize_follow(.*)$) {
            set $new_request_uri $1;
        }
        proxy_pass https://[::1]:3003/authorize_follow$new_request_uri;
        # proxy_set_header Host mastodon.freshman.dev;
        # proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto https;
    }
}
server {
    server_name
        ~^mastodon\.(?<domain>[^.]+)\.(?<tld>[^.]+)$
        ~^m\.(?<domain>[^.]+)\.(?<tld>[^.]+)$;
    listen 80;
    include sites-available/fragments/personal-ssl;
    return 301 $scheme://mastodon.freshman.dev$request_uri$is_args$args;
}


server {
    server_name _;
    listen 80 default_server;
    listen [::]:80 default_server;
    root /var/www/personal;
    location /.well-known { try_files /build/$uri =404; }
    location / {
        return 301 https://$host$request_uri$is_args$args;
    }
}